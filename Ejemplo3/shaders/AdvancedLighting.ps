#version 400

uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform vec4 diffuseLightColor;

in DATA
{
	vec4 position;
	vec3 normal;
	vec2 uv;
	vec3 binormal;
	vec3 tangent;
} fs_in;

struct Light
{
	vec4 color;
	vec3 position;
	vec3 direction;
	vec3 lightVector;
	float intensity;
};

struct Material
{
	vec4 albedo;
	vec3 specular;
	float roughness;
	vec3 normal;
};

struct Attributes
{
	vec3 position;
	vec3 normal;
	vec3 binormal;
	vec3 tangent;
};

Attributes g_Attributes;

uniform sampler2D u_AlbedoMap;
uniform sampler2D u_SpecularMap;
uniform sampler2D u_GlossMap;
uniform sampler2D u_NormalMap;

uniform vec4 u_AlbedoColor;
uniform vec3 u_SpecularColor;
uniform float u_GlossColor;
uniform vec3 u_NormalColor;

uniform float u_UsingAlbedoMap;
uniform float u_UsingSpecularMap;
uniform float u_UsingGlossMap;
uniform float u_UsingNormalMap;

uniform sampler2D diffuseTexture;

vec4 GammaCorrectTexture(sampler2D tex, vec2 uv)
{
	vec4 samp = texture(tex, uv);
	return vec4(pow(samp.rgb, vec3(GAMMA)), samp.a);
}

vec3 GammaCorrectTextureRGB(sampler2D tex, vec2 uv)
{
	vec4 samp = texture(tex, uv);
	return vec3(pow(samp.rgb, vec3(GAMMA)));
}

vec4 GetAlbedo()
{
	return (1.0 - u_UsingAlbedoMap) * u_AlbedoColor + u_UsingAlbedoMap * GammaCorrectTexture(u_AlbedoMap, fs_in.uv);
}

vec3 GetSpecular()
{
	return (1.0 - u_UsingSpecularMap) * u_SpecularColor + u_UsingSpecularMap * GammaCorrectTextureRGB(u_SpecularMap, fs_in.uv);
}

float GetGloss()
{
	return (1.0 - u_UsingGlossMap) * u_GlossColor + u_UsingGlossMap * GammaCorrectTextureRGB(u_GlossMap, fs_in.uv).r;
}

float GetRoughness()
{
	return 1.0 - GetGloss();
}

vec3 FinalGamma(vec3 color)
{
	return pow(color, vec3(1.0 / GAMMA));
}

float FresnelSchlick(float f0, float fd90, float view)
{
	return f0 + (fd90 - f0) * pow(max(1.0 - view, 0.1), 5.0);
}

float Disney(Light light, Material material, vec3 eye)
{
	vec3 halfVector = normalize(light.lightVector + eye);

	float NdotL = max(dot(g_Attributes.normal, light.lightVector), 0.0);
	float LdotH = max(dot(light.lightVector, halfVector), 0.0);
	float NdotV = max(dot(g_Attributes.normal, eye), 0.0);

	float energyBias = mix(0.0, 0.5, material.roughness);
	float energyFactor = mix(1.0, 1.0 / 1.51, material.roughness);
	float fd90 = energyBias + 2.0 * (LdotH * LdotH) * material.roughness;
	float f0 = 1.0;

	float lightScatter = FresnelSchlick(f0, fd90, NdotL);
	float viewScatter = FresnelSchlick(f0, fd90, NdotV);

	return lightScatter * viewScatter * energyFactor;
}

vec3 GGX(Light light, Material material, vec3 eye)
{
	vec3 h = normalize(light.lightVector + eye);
	float NdotH = max(dot(g_Attributes.normal, h), 0.0);

	float rough2 = max(material.roughness * material.roughness, 2.0e-3); // capped so spec highlights don't disappear
	float rough4 = rough2 * rough2;

	float d = (NdotH * rough4 - NdotH) * NdotH + 1.0;
	float D = rough4 / (PI * (d * d));

	// Fresnel
	vec3 reflectivity = material.specular;
	float fresnel = 1.0;
	float NdotL = clamp(dot(g_Attributes.normal, light.lightVector), 0.0, 1.0);
	float LdotH = clamp(dot(light.lightVector, h), 0.0, 1.0);
	float NdotV = clamp(dot(g_Attributes.normal, eye), 0.0, 1.0);
	vec3 F = reflectivity + (fresnel - fresnel * reflectivity) * exp2((-5.55473 * LdotH - 6.98316) * LdotH);

	// geometric / visibility
	float k = rough2 * 0.5;
	float G_SmithL = NdotL * (1.0 - k) + k;
	float G_SmithV = NdotV * (1.0 - k) + k;
	float G = 0.25 / (G_SmithL * G_SmithV);

	return G * D * F;
}

vec3 RadianceIBLIntegration(float NdotV, float roughness, vec3 specular)
{
	vec2 preintegratedFG = texture(u_PreintegratedFG, vec2(roughness, 1.0 - NdotV)).rg;
	return specular * preintegratedFG.r + preintegratedFG.g;
}

vec3 IBL(Light light, Material material, vec3 eye)
{
	float NdotV = max(dot(g_Attributes.normal, eye), 0.0);

	vec3 reflectionVector = normalize(reflect(-eye, g_Attributes.normal));
	float smoothness = 1.0 - material.roughness;
	float mipLevel = (1.0 - smoothness * smoothness) * 10.0;
	vec4 cs = textureLod(u_EnvironmentMap, reflectionVector, mipLevel);
	vec3 result = pow(cs.xyz, vec3(GAMMA)) * RadianceIBLIntegration(NdotV, material.roughness, material.specular);

	vec3 diffuseDominantDirection = g_Attributes.normal;
	float diffuseLowMip = 9.6;
	vec3 diffuseImageLighting = textureLod(u_EnvironmentMap, diffuseDominantDirection, diffuseLowMip).rgb;
	diffuseImageLighting = pow(diffuseImageLighting, vec3(GAMMA));

	return result + diffuseImageLighting * material.albedo.rgb;
}

float Diffuse(Light light, Material material, vec3 eye)
{
	return Disney(light, material, eye);
}

vec3 Specular(Light light, Material material, vec3 eye)
{
	return GGX(light, material, eye);
}

// TODO: Windowing
float Attenuate(Light light)
{
	vec3 direction = light.position - vec3(fs_in.position);
	return light.intensity * 1.0 / (dot(direction, direction) + 0.01); // TODO: 4pi
}

float random(vec3 seed, int i)
{
	vec4 seed4 = vec4(seed, i);
	float dot_product = dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673));
	return fract(sin(dot_product) * 43758.5453);
}

vec3 NormalMap()
{
	mat3 toWorld = mat3(g_Attributes.binormal, g_Attributes.tangent, g_Attributes.normal);
	vec3 normalMap = texture(u_NormalMap, fs_in.uv).rgb * 2.0 - 1.0;
	normalMap = toWorld * normalMap.rgb;
	normalMap = normalize(normalMap);
	return normalMap;
}

void main() {
	g_Attributes.position = fs_in.position.xyz;
	// Normalize inputs
	g_Attributes.normal = normalize(fs_in.normal);
	g_Attributes.tangent = normalize(fs_in.tangent);
	g_Attributes.binormal = normalize(fs_in.binormal);

	if (u_UsingNormalMap > 0.0)
		g_Attributes.normal = NormalMap();

	vec3 eye = normalize(fs_in.cameraPos - g_Attributes.position);

	Light light;
	light.color = diffuseLightColor;
	light.position = lightPosition;
	light.direction = lightDirection;
	light.lightVector = light.direction;
	light.intensity = Attenuate(light);

	Material material;
	material.albedo = GetAlbedo();
	material.specular = GetSpecular();
	material.roughness = GetRoughness();

	vec4 diffuse = vec4(0.0);
	vec3 specular = vec3(0.0);

	float NdotL = clamp(dot(g_Attributes.normal, light.lightVector), 0.0, 1.0);

	// Diffuse Calculation
	diffuse += NdotL * Diffuse(light, material, eye) * light.color * light.intensity;
	// Specular Calculation
	specular += NdotL * Specular(light, material, eye) * light.color.xyz * light.intensity;
	light.intensity /= 2.0;
	light.lightVector = -light.lightVector;

	vec3 finalColor = material.albedo.rgb * diffuse.rgb + (specular + IBL(light, material, eye));
	finalColor = FinalGamma(finalColor);
	color = vec4(finalColor, material.albedo.a);
}